#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# Completion
autoload -U +X bashcompinit && bashcompinit
## trizen: copy /usr/share/zsh/site-functions/_trizen to modules/completion/external/src
# https://wiki.archlinux.org/index.php/zsh#Persistent_rehash
zstyle ':completion:*' rehash true
## stack
# eval "$(stack --bash-completion-script stack)"

# Aliases
## git
alias git="hub"
alias g="git"
alias ga="git add"
alias gc="git commit"
alias gco="git checkout"
alias gst="git status"
alias gp="git push"
alias gpu="git pull"
unalias gs # ghostscript
function gcd () {
    cd $(git rev-parse --show-toplevel)
}
function gi () {
    # Destination
    root="$(pwd)"
    dst="$root/.gitignore"

    if [ ! -e "$dst" ]; then
        touch "$dst"
    fi

    ignores="$HOME/repos/misc/gitignore"
    for i in $*; do
        # Capitalize
        i=`sed 's/\(.\)/\U\1/' <<< "$i"`
        src1="$ignores/$i.gitignore"
        src2="$ignores/Global/$i.gitignore"
        if [ -e "$src1" ]; then
            echo "# $i" >> "$dst"
            cat "$src1" >> "$dst"
            echo >> "$dst"
        fi
        if [ -e "$src2" ]; then
            echo "# $i" >> "$dst"
            cat "$src2" >> "$dst"
            echo >> "$dst"
        fi
    done
}

## tmux
alias tatt="tmux attach -t"
alias tls="tmux ls"

## stack
# alias sb="stack build"

## cargo
alias cb="cargo build"
alias cr="cargo run"
alias ct="cargo test"

## cmake
alias rmake="cmake -DCMAKE_BUILD_TYPE=Release"
alias dmake="cmake -DCMAKE_BUILD_TYPE=Debug"

## todotxt
# export TODOTXT_DEFAULT_ACTION="list"
# alias t="todo.sh -d $HOME/.todo.cfg"
# alias ta="t ls +anime"
# alias td="t ls +dev"
# alias tm="t ls +movie"
# complete -F _todo t

## sjl's t
# alias t="$HOME/bin/t.py --task-dir $HOME/todo --list DEV --delete-if-empty"
# alias ta="$HOME/bin/t.py --task-dir $HOME/todo --list ANIMES --delete-if-empty"
# alias tm="$HOME/bin/t.py --task-dir $HOME/todo --list MOVIES --delete-if-empty"

## mpv
alias play-dvd="smplayer dvdread://"
alias webcam=" mpv /dev/video0 --fps=30 --no-resume-playback" # s to take a screenshot
alias mpvr="mpv --no-resume-playback --no-audio-display"
alias moe="mpv --no-resume-playback https://listen.moe/stream"
alias drive="mpv --no-resume-playback http://streaming.radionomy.com/DRIVE"

## misc
alias py="python -i"
alias ...="cd ../.."
alias gldoc="xdg-open $HOME/dev/cpp/gl/tools/docs.gl/htdocs/index.html &"
alias sfmldoc="xdg-open /usr/share/SFML/doc/html/index.html &"
alias jp="cd $HOME/lang/jp"
alias yb="youtube-dl -f 18 --no-playlist"
alias hyb="youtube-dl -f 22 --no-playlist"
alias m="make"
alias vim-update="vim +PlugUpgrade +PlugUpdate"
alias whofap="git ls-tree --name-only -z -r HEAD | grep -z -Z -E '\.(c|h|cpp|hpp|tpp|glsl|hs)$'|xargs -0 -n1 git blame --line-porcelain | grep '^author '| sort | uniq -c | sort -nr"
alias open="xdg-open"
alias del="gio trash"
alias fucking="sudo"
alias trackmania="cd $HOME/.wine/drive_c/Program\ Files\ \(x86\)/TmNationsForever && optirun wine TmForeverLauncher.exe"

# Raspberry
export PIIP="192.168.1.16"
export PIDOMAIN="nyorem.ddns.net"
## Local
alias lpi="ssh pi@$PIIP"
alias lpix="ssh -Y pi@$PIIP"
## Global
alias pi="ssh pi@$PIDOMAIN"
alias pix="ssh -Y pi@$PIDOMAIN"

# Variables
## PATH
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/bin/perso:$PATH"

### stack
export PATH="$HOME/.local/bin:$PATH"
# export PATH="$HOME/.stack/programs/x86_64-linux/ghcjs-0.2.1.9007019_ghc-8.0.1/bin:$PATH"

### rust
export PATH="$HOME/.cargo/bin:$PATH"

## CGAL
### dev
# export CGAL_DIR="$HOME/projets/cgal/master"
# export PATH="$CGAL_DIR/Scripts/developer_scripts:$PATH"
# export PATH="$CGAL_DIR/Scripts/scripts:$PATH"
# export LD_LIBRARY_PATH="$CGAL_DIR/lib:$LD_LIBRARY_PATH"
### release
export CGAL_DIR="$HOME/projets/cgal/CGAL-4.12"
export PATH="$CGAL_DIR/scripts:$PATH"
export LD_LIBRARY_PATH="$CGAL_DIR/lib:$LD_LIBRARY_PATH"

## nes
export NESDEV_ROOT="$HOME/dev/c/nes"
export PATH="$NESDEV_ROOT/bin:$PATH"

## vita
export PSVITAIP="192.168.1.30"
# export PSVITAIP="192.168.1.31"
export VITASDK="$HOME/dev/c/vita/tools/vitasdk"
export PATH="$VITASDK/bin:$PATH"
export PSP2CGC="$HOME/dev/c/vita/tools/psp2cgc.exe"
alias psp2cgc="wine $PSP2CGC"
function vitasend () {
	curl -T $1 "ftp://$PSVITAIP:1337/ux0:/"
}

## misc
export table="(╯°□°）╯︵ ┻━┻"
export lenny="( ͡° ͜ʖ ͡°)"
export startmenu="/usr/share/applications"
export BROWSER="chromium"

## phd
export PHDDIR="$HOME/projets/phd"
export LUXROOT_DIR="$PHDDIR/rendering/lux-v1.6-x86_64-sse2-OpenCL/" # LuxRender 1.6
export PATH="$LUXROOT_DIR:$PATH"
export PATH="$PHDDIR/repo/code/monge_ampere_surfaces/thirdparty/geogram/build/Linux64-gcc-dynamic-Release/bin:$PATH"
export PATH="$PHDDIR/rendering/blender-2.77a-linux-glibc211-x86_64/:$PATH"
export PATH="$PHDDIR/bin:$PATH"
alias lux="luxrender --debug --threads 4"
alias blend="optirun blender" # blender 2.77
alias _blender="$HOME/bin/blender.sh"
alias blend2="optirun $PHDDIR/rendering/blender-2.79b-linux-glibc219-x86_64/blender" # blender 2.79 (with LuxCoreBlender)
alias meshlab="LC_ALL=C meshlab" # see meshlab bug: https://sourceforge.net/p/meshlab/bugs/162/

## arch
export AURHELPER="trizen"

## lua
export PATH="$HOME/.luarocks/bin:$PATH"

# Custom functions
## Toggle proxy
function proxy_on() {
    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"

    if (( $# > 0 )); then
        valid=$(echo $@ | sed -n 's/\([0-9]\{1,3\}.\)\{4\}:\([0-9]\+\)/&/p')
        if [[ $valid != $@ ]]; then
            >&2 echo "Invalid address"
            return 1
        fi

        export http_proxy="http://$1/"
        export https_proxy=$http_proxy
        export ftp_proxy=$http_proxy
        export rsync_proxy=$http_proxy
        echo "Proxy environment variable set."
        return 0
    fi

    echo -n "username: "; read username
    if [[ $username != "" ]]; then
        echo -n "password: "
        read -es password
        local pre="$username:$password@"
    fi

    echo -n "server: "; read server
    echo -n "port: "; read port
    export http_proxy="http://$pre$server:$port/"
    export https_proxy=$http_proxy
    export ftp_proxy=$http_proxy
    export rsync_proxy=$http_proxy
    export HTTP_PROXY=$http_proxy
    export HTTPS_PROXY=$http_proxy
    export FTP_PROXY=$http_proxy
    export RSYNC_PROXY=$http_proxy
}

function proxy_off(){
    unset http_proxy
    unset https_proxy
    unset ftp_proxy
    unset rsync_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset FTP_PROXY
    unset RSYNC_PROXY
    echo -e "Proxy environment variable removed."
}

## Image manipulation utilities
function greyscale () {
    img="$1"
    filename="${img%.*}"
    extension="${img##*.}"
    img_bw=$filename"_bw.$extension"
    tmp="out.$extension"
    convert "$img" -set colorspace Gray -separate -average "$tmp"
    mv "$tmp" "$img_bw"
}

function flip-x () {
    img="$1"
    filename="${img%.*}"
    extension="${img##*.}"
    img_flip=$filename"_flip-x.$extension"
    tmp="out.$extension"
    convert "$img" -flop "$tmp"
    mv "$tmp" "$img_flip"
}

function flip-y () {
    img="$1"
    filename="${img%.*}"
    extension="${img##*.}"
    img_flip=$filename"_flip-y.$extension"
    tmp="out.$extension"
    convert "$img" -flip "$tmp"
    mv "$tmp" "$img_flip"
}

function convert-all () {
    in_ext="$1"
    out_ext="$2"
    for file in $(ls *.${in_ext}); do
        filename="${file%.*}"
        out_filename="$filename.$out_ext"
        convert "$file" "$out_filename"
    done
}

# Private
## Proxy variables (only if the Ethernet cable is plugged in)
# ifup=$(ip link show enp5s0f1 up | grep " UP ")
# if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/private/proxy.sh" ]] && [[ -n "$ifup" ]]; then
#     source "${ZDOTDIR:-$HOME}/.zprezto/private/proxy.sh"
# fi

## Aliases
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/private/aliases.sh" ]]; then
    source "${ZDOTDIR:-$HOME}/.zprezto/private/aliases.sh"
fi

## network
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/private/network.sh" ]]; then
    source "${ZDOTDIR:-$HOME}/.zprezto/private/network.sh"
fi

## fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# fzf + ag / rg configuration
if type fzf > /dev/null; then
    if type rg > /dev/null; then
        export FZF_DEFAULT_COMMAND='rg --files' # rg
    elif type ag > /dev/null; then
        export FZF_DEFAULT_COMMAND='ag --nocolor -g ""' # ag
    fi

    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi
